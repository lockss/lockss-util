<!-- 

Copyright (c) 2000, Board of Trustees of Leland Stanford Jr. University
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.lockss</groupId>
    <artifactId>lockss-parent-pom</artifactId>
    <version>1.1.0</version>
  </parent>
  
  <artifactId>lockss-util</artifactId>
  <version>1.4.0-SNAPSHOT</version>
  <packaging>jar</packaging>
  <name>${project.groupId}:${project.artifactId}</name>
  <description>Development and testing utilities common to most LOCKSS projects</description>

  <!-- Needs to be repeated from parent -->
  <scm>
    <connection>${scmConnection}</connection>
    <developerConnection>${scmDeveloperConnection}</developerConnection>
    <url>${scmUrl}</url>
  </scm>

  <properties>
    <junit.jupiter.version>5.0.2</junit.jupiter.version>
    <junit.platform.version>1.0.2</junit.platform.version>
  </properties>

  <build>
  
    <plugins>
    
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.19.1</version><!-- because of https://github.com/junit-team/junit5/issues/809 -->
        <dependencies>
          <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-surefire-provider</artifactId>
            <version>${junit.platform.version}</version>
          </dependency>
          <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.jupiter.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      
      <!-- Atlassian plugin to assist with Git Flow workflows -->
      <plugin>
        <groupId>external.atlassian.jgitflow</groupId>
        <artifactId>jgitflow-maven-plugin</artifactId>
        <version>1.0-m5.1</version>
        <configuration>
          <!-- Whether to allow SNAPSHOT dependencies. Default is to fail when finding any SNAPSHOT; default: false -->
          <allowSnapshots>true</allowSnapshots>
          <!-- Whether to allow untracked files when checking if the working tree is clean; default: false -->
          <allowUntracked>true</allowUntracked>
          <!-- Whether to automatically assign submodules the parent version. If set to false, the user will be prompted for the version of each submodules; default: false -->
          <autoVersionSubmodules>false</autoVersionSubmodules>
          <!-- Whether to append the feature name to the version on the feature branch; default: false -->
          <enableFeatureVersions>false</enableFeatureVersions>
          <!-- Whether to enable using an ssh-agent; default: false -->
          <enableSshAgent>true</enableSshAgent>
          <!-- Whether to rebase the feature branch before merging; default: false -->
          <featureRebase>false</featureRebase>
          <!-- Naming conventions -->
          <flowInitContext>
            <masterBranchName>master</masterBranchName>
            <developBranchName>develop</developBranchName>
            <featureBranchPrefix>feature-</featureBranchPrefix>
            <releaseBranchPrefix>release-</releaseBranchPrefix>
            <hotfixBranchPrefix>hotfix-</hotfixBranchPrefix>
            <versionTagPrefix>version-</versionTagPrefix>
          </flowInitContext>
          <!-- Whether to keep the feature branch after finishing the feature; default: false -->
          <!-- Whether to keep the hotfix branch after finishing the hotfix; default: false -->
          <!-- Whether to keep the release branch after finishing the release; default: false -->
          <keepBranch>true</keepBranch>
          <!-- Whether to turn off maven deployment. If false the "deploy" goal is called. If true the "install" goal is called; default: false -->
          <noDeploy>true</noDeploy>
          <!-- Whether to turn off project building. If true the project will NOT be built during feature finish; default: false -->
          <noFeatureBuild>false</noFeatureBuild>
          <!-- Whether to turn off merging changes from the feature branch to develop; default: false -->
          <noFeatureMerge>false</noFeatureMerge>
          <!-- Whether to turn off project building. If true the project will NOT be built during hotfix finish; default: false -->
          <noHotfixBuild>false</noHotfixBuild>
          <!-- Whether to turn off project building. If true the project will NOT be built during release finish; default: false -->
          <noReleaseBuild>false</noReleaseBuild>
          <!-- Whether to turn off merging changes from the release branch to master and develop; default: false -->
          <noReleaseMerge>false</noReleaseMerge>
          <!-- Whether to turn off tagging the release in git; default: false -->
          <!-- Whether to turn off tagging the hotfix in git; default: false -->
          <noTag>false</noTag>
          <!-- Whether to push feature branches to the remote upstream; default: false -->
          <pushFeatures>false</pushFeatures>
          <!-- Whether to push hotfix branches to the remote upstream -->
          <pushHotfixes>false</pushHotfixes>
          <!-- Whether to push release branches to the remote upstream; default: false -->
          <pushReleases>false</pushReleases>
          <!-- The message prefix to use for all SCM changes; default: "" -->
          <scmCommentPrefix></scmCommentPrefix>
          <!-- Whether to squash commits into a single commit before merging; default: false -->
          <squash>true</squash>
          <!-- Whether, for modules which refer to each other within the same multi-module build, to update dependencies version to the release version; default: true -->
          <!-- Whether to update dependencies version to the hotfix version; default: true -->
          <updateDependencies>true</updateDependencies>
          <!-- Whether to use the release profile that adds sources and javadocs to the released artifact, if appropriate. If set to true, the plugin sets the property "performRelease" to true, which activates the profile "release-profile", which is inherited from the super pom. Default: true -->
          <useReleaseProfile>false</useReleaseProfile>
        </configuration>
      </plugin>
  
    </plugins>

  </build>

  <dependencies>

    <!-- 
        See JUnit 5 diagram at:
        http://junit.org/junit5/docs/current/user-guide/#dependency-diagram .
    -->
  
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-runner</artifactId>
      <version>${junit.platform.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- 
        end JUnit 5
    -->
    
    <!--  Hamcrest needed by numerous tests -->    
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>1.3</version>
      <scope>test</scope>
    </dependency>

    <!-- Apache Commons Collections needed by ListUtil -->    
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
      <version>4.1</version>
    </dependency>

    <!-- Apache Commons Lang needed by StringUtil
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.6</version>
    </dependency> -->

    <!--  SLF4J needed by many classes
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.25</version>
    </dependency> -->

  </dependencies>

</project>
